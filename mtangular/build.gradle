buildscript {

	ext {
		springBootVersion = '1.5.4.RELEASE'
		   gradleNodeVersion = '1.2.0'
		//mainClassName = 'com.mtangular.ui.SpringMxBootApp'
	}

	repositories {
		mavenCentral();
		
		 maven {
     	 url "https://plugins.gradle.org/m2/"
    	}
	}

	dependencies {
	//classpath("")
	classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	classpath("io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE")
	  classpath "com.moowork.gradle:gradle-node-plugin:$gradleNodeVersion"
	}

}

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'com.moowork.node'
apply plugin: 'war'

mainClassName = 'com.mtangular.ui.SpringMxBootApp'


war {
    baseName = 'angulardemo'
    version =  '1.0'
    manifest {
        attributes 'Main-Class': 'com.mtangular.ui.SpringMxBootApp'
    }
}

jar.dependsOn ':buildClientToSpring'
war.dependsOn ':buildClientToSpring'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral();
}

jar {
    baseName = 'spring-boot-example'
    version =  version
}

dependencies {
  
  
   
    api 'org.apache.commons:commons-math3:3.6.1'
    implementation 'com.google.guava:guava:23.0'
    testImplementation 'junit:junit:4.12'    
	//compile group: 'org.springframework.boot', name: 'spring-boot-starter-parent', version: '2.0.2.RELEASE', ext: 'pom'
    compile "org.springframework.boot:spring-boot-starter"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile group: 'com.h2database', name: 'h2', version: '1.4.196'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools'
    compile group: 'org.apache.commons', name: 'commons-dbcp2'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.3'
    

    
    
    
    
    
    
  //  compile files("./lib/murupakkam-0.0.1-SNAPSHOT.jar")
   
}

node {
    version = '9.7.1'
    npmVersion = '5.6.0'
    download = true
    workDir = file("${rootDir}/angular-ui/node")
    nodeModulesDir = file("${rootDir}/angular-ui")
}


//defaultTasks = ['clean', 'build']
//println "${rootDir}"

task cleandist(type: Delete) {
    group 'build client'
    delete "${rootDir}/angular-ui/dist"
}

task cleanNpm(type: Delete) {
    group 'build client'
    dependsOn 'clean'
    delete "${rootDir}/angular-ui/node", "${rootDir}/angular-ui/node_modules"
}

task npmUpdate {
    group 'build client'
    dependsOn 'npm_update'
}

//------------------------------------------------------------------------------------------------------------------------
//    Tasks - Standalone client
//------------------------------------------------------------------------------------------------------------------------

task buildStandaloneClient(type: NpmTask, dependsOn: npmInstall) {
    group 'build client'
    description = 'Compile client side folder for development'
    args = ['run', 'buildStandalone']
}

task serveStandaloneClientWatch(type: NpmTask, dependsOn: npmInstall) {
    group 'build client'
    description = "Builds, serves and watches the client side assets for rebuilding"
    args = ['run', 'serveStandaloneWatch']
}

task serveStandaloneClient(type: NpmTask, dependsOn: npmInstall) {
    group 'build client'
    description = "Compile client side folder for production"
    args = ['start']
}

task bootStandaloneClient(type: GradleBuild) {
    group 'application'
    setTasks(['clean', 'buildStandaloneClient', 'serveStandaloneClient'])
//    finalizedBy 'npm_shutdown'
}

task bootStandaloneClientWatch(type: GradleBuild) {
    group 'application'
    setTasks(['clean', 'serveStandaloneClientWatch'])
//    finalizedBy 'npm_shutdown'
}

//------------------------------------------------------------------------------------------------------------------------
//    Tasks - Integrated client
//------------------------------------------------------------------------------------------------------------------------

task buildClientToSpring(type: NpmTask, dependsOn: npmInstall) {
    group 'build client'
    description = 'Compile client side folder for development'
    args = ['run', 'buildToSpring']
}



task bootFullApplication(type: GradleBuild) {
    group 'application'
    setTasks([':npmUpdate', ':cleandist', ':buildClientToSpring', ':bootRun'])
}

